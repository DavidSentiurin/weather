{"version":3,"sources":["components/ErrorMessage/ErrorMessage.module.scss","components/loading/Loading.js","components/ErrorMessage/ErrorMessage.js","components/WeatherTable/WeatherTable.js","config.js","apiServices.js","citiesList/citiesList.js","components/CitySelector/CitySelector.js","App.js","redux/actions/actions.js","redux/actions/actionTypes.js","serviceWorker.js","redux/reducer.js","pages/Weather.js","index.js"],"names":["module","exports","Loading","props","Segment","Dimmer","active","inverted","Loader","size","children","Image","src","ErrorMessage","className","classes","error","WeatherTable","status","data","constructor","Object","console","entries","length","clouds","wind","name","main","temp","humidity","pressure","Header","style","marginTop","Card","fluid","color","padding","Table","basic","Body","Row","Cell","as","image","Content","all","deg","speed","url","config","apiKey","api","getWeatherFromCoords","latitude","longitude","axios","get","getWeatherFromCity","city","countryOptions","citiesList","map","key","id","value","text","SelectWithCities","Select","placeholder","options","onChange","App","navigator","geolocation","getCurrentPosition","onSetLocation","prevProps","this","onWeatherFromCoords","CitySelector","onSetCity","to","Button","Component","connect","state","dispatch","geoPosition","coords","type","setLocation","lat","lon","a","response","e","localStorage","setItem","withRouter","Boolean","window","location","hostname","match","initialState","rootReducer","action","assign","dataWeather","statusWeather","onWeatherFromCity","coordinates","forEach","cityObj","coord","weatherFromCity","getItem","Store","createStore","applyMiddleware","ReduxThunk","app","store","path","component","exact","Weather","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.111a846b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ErrorMessage_error__1dSrT\",\"error-text\":\"ErrorMessage_error-text__3nr7E\"};","import React from 'react';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\r\n\r\nconst Loading = (props) => {\r\n  return (\r\n    <Segment>\r\n      <Dimmer active inverted>\r\n        <Loader size={props.size}>Loading</Loader>\r\n      </Dimmer>\r\n\r\n      {(props.children) ? props.children : <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport classes from './ErrorMessage.module.scss'\r\n\r\nconst ErrorMessage = (props) => {\r\n  return (\r\n    <div className={(props.className || '') + ` ${classes.error}`}>\r\n      <p className={classes['error-text']}>\r\n        {props.children}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;","import React from 'react';\r\nimport { Header, Table, Card } from 'semantic-ui-react';\r\nimport Loading from '../loading/Loading';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\n\r\nconst WeatherTable = (props) => {\r\n  if (props.status >= 400) {\r\n    return <ErrorMessage children={`Server error. Status code: ${props.status}`} />;\r\n  }\r\n\r\n  if (props.data?.constructor !== Object) {\r\n    console.error(`The WeatherTable expects an object. Incoming data: '${typeof props.data}'`)\r\n    return null;\r\n  } else if (Object.entries(props.data).length === 0 || !props.status) {\r\n    return <Loading size='large' />;\r\n  }\r\n\r\n  const { clouds, wind, name } = props.data;\r\n  const { temp, humidity, pressure } = props.data.main;\r\n\r\n  return (\r\n    <>\r\n      <Header size='huge' style={{ marginTop: 20 }}>Weather in {name}</Header>\r\n      <Card fluid color='yellow' className='table-card' style={{ padding: 10 }}>\r\n        <Table basic='very'>\r\n          <Table.Body>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Temp\r\n                </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{temp}</Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Clouds\r\n                </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{`${clouds.all}%`}</Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Humidity\r\n                  </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{`${humidity}%`}</Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Pressure\r\n                  </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{`${pressure}hPa`}</Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Wind Direction\r\n                  </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{`${wind.deg}°`}</Table.Cell>\r\n            </Table.Row>\r\n            <Table.Row>\r\n              <Table.Cell>\r\n                <Header as='h4' image>\r\n                  <Header.Content>\r\n                    Wind Speed\r\n                  </Header.Content>\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>{`${wind.speed}m/s`}</Table.Cell>\r\n            </Table.Row>\r\n          </Table.Body>\r\n        </Table>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WeatherTable;\r\n","export default {\r\n  url: 'http://api.openweathermap.org/data/2.5/weather',\r\n  apiKey: '8fd11986b3337e190cc8d6d43774fe90'\r\n};\r\n","import config from './config';\r\nimport axios from 'axios';\r\n\r\nconst url = config.url;\r\nconst apiKey = config.apiKey;\r\n\r\nconst api = {\r\n  getWeatherFromCoords: (latitude, longitude) => {\r\n    if (!latitude || !longitude) {\r\n      console.error(`Error of coordinates. Latitude: ${latitude}, longitude: ${longitude}.`);\r\n      return;\r\n    }\r\n\r\n    return (\r\n      axios.get(`${url}?lat=${latitude}&lon=${longitude}&appid=${apiKey}`)\r\n    );\r\n  },\r\n  getWeatherFromCity: (city) => {\r\n    return (\r\n      axios.get(`${url}?q=${city}&appid=${apiKey}`)\r\n    );\r\n  },\r\n};\r\n\r\nexport default api;\r\n","export default [\r\n  {\r\n    \"id\": 698740,\r\n    \"name\": \"Odessa\",\r\n    \"state\": \"\",\r\n    \"country\": \"UA\",\r\n    \"coord\": {\r\n      \"lon\": 30.732622,\r\n      \"lat\": 46.477474\r\n    }\r\n  },\r\n  {\r\n    \"id\": 703448,\r\n    \"name\": \"Kyiv\",\r\n    \"state\": \"\",\r\n    \"country\": \"UA\",\r\n    \"coord\": {\r\n      \"lon\": 30.516666,\r\n      \"lat\": 50.433334\r\n    }\r\n  },\r\n  {\r\n    \"id\": 702550,\r\n    \"name\": \"Lviv\",\r\n    \"state\": \"\",\r\n    \"country\": \"UA\",\r\n    \"coord\": {\r\n      \"lon\": 24.023239,\r\n      \"lat\": 49.838261\r\n    }\r\n  },\r\n  {\r\n    \"id\": 709930,\r\n    \"name\": \"Dnipro\",\r\n    \"state\": \"\",\r\n    \"country\": \"UA\",\r\n    \"coord\": {\r\n      \"lon\": 34.98333,\r\n      \"lat\": 48.450001\r\n    }\r\n  },\r\n]\r\n","import React from 'react';\r\nimport citiesList from '../../citiesList/citiesList';\r\nimport { Select } from 'semantic-ui-react';\r\n\r\nconst countryOptions = citiesList.map(city => {\r\n  return {\r\n    key: city.id,\r\n    value: city.name,\r\n    text: city.name,\r\n  }\r\n})\r\n\r\nconst SelectWithCities = (props) => {\r\n  return (\r\n    <>\r\n      <Select\r\n        placeholder='Select your city'\r\n        options={countryOptions}\r\n        onChange={props.onChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectWithCities;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.scss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport WeatherTable from './components/WeatherTable/WeatherTable';\r\nimport ErrorMessage from './components/ErrorMessage/ErrorMessage';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { setLocation, weatherFromCoords, setCity } from './redux/actions/actions';\r\nimport CitySelector from './components/CitySelector/CitySelector';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    navigator.geolocation.getCurrentPosition(this.props.onSetLocation);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const isCoordinates = (this.props.latitude !== prevProps.latitude\r\n      && this.props.longitude !== prevProps.longitude);\r\n\r\n    if (isCoordinates) {\r\n      const { latitude, longitude } = this.props;\r\n      this.props.onWeatherFromCoords(latitude, longitude);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n          {\r\n            (!this.props.latitude && !this.props.longitude)\r\n              ? <ErrorMessage children='Your geolocation is unknown. Allow to use geolocation or choose a city' />\r\n              : <WeatherTable data={this.props.data} status={this.props.status} />\r\n          }\r\n          <Header size='huge'>Select your City</Header>\r\n          <CitySelector onChange={this.props.onSetCity} />\r\n\r\n          <NavLink to=\"/weather\">\r\n            <Button basic color='orange'>\r\n              See the weather\r\n            </Button>\r\n          </NavLink>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    city: state.city,\r\n    latitude: state.latitude,\r\n    longitude: state.longitude,\r\n    data: state.data,\r\n    status: state.status,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSetLocation: geoPosition => dispatch(setLocation(geoPosition)),\r\n    onWeatherFromCoords: (lat, lon) => dispatch(weatherFromCoords(lat, lon)),\r\n    onSetCity: (e, { value }) => {\r\n      dispatch(setCity(value));\r\n\r\n      localStorage.setItem('city', value);\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\r\n","import { SET_LOCATION, WEATHER_FROM_COORDS, WEATHER_FROM_CITY, SET_CITY } from './actionTypes';\r\nimport api from '../../apiServices';\r\nimport citiesList from '../../citiesList/citiesList';\r\n\r\nexport const setLocation = (geoPosition) => {\r\n  const { latitude, longitude } = geoPosition.coords;\r\n\r\n  return {\r\n    type: SET_LOCATION,\r\n    latitude,\r\n    longitude,\r\n  }\r\n};\r\n\r\nexport const weatherFromCoords = (latitude, longitude) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      let response = await api.getWeatherFromCoords(latitude, longitude);\r\n\r\n      dispatch({\r\n        type: WEATHER_FROM_COORDS,\r\n        data: response.data,\r\n        status: response.status,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n\r\n      dispatch({\r\n        type: WEATHER_FROM_COORDS,\r\n        data: null,\r\n        status: err.response.status,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const setCity = (city) => {\r\n  return {\r\n    type: SET_CITY,\r\n    city,\r\n  }\r\n}\r\n\r\nexport const weatherFromCity = (city) => {\r\n  const coordinates = {};\r\n\r\n  citiesList.forEach(cityObj => {\r\n    if (city === cityObj.name) {\r\n      coordinates.latitude = cityObj.coord.lat;\r\n      coordinates.longitude = cityObj.coord.lon;\r\n    }\r\n  });\r\n\r\n  const { latitude, longitude } = coordinates;\r\n\r\n  return async (dispatch) => {\r\n    try {\r\n      let response = await api.getWeatherFromCoords(latitude, longitude);\r\n\r\n      dispatch({\r\n        type: WEATHER_FROM_CITY,\r\n        dataWeather: response.data,\r\n        status: response.status,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n\r\n      dispatch({\r\n        type: WEATHER_FROM_CITY,\r\n        dataWeather: null,\r\n        status: err.response.status,\r\n      });\r\n    }\r\n  }\r\n};\r\n","export const SET_LOCATION = 'SET_LOCATION';\r\nexport const WEATHER_FROM_COORDS = 'WEATHER_FROM_COORDS';\r\nexport const SET_CITY = 'SET_CITY';\r\nexport const WEATHER_FROM_CITY = 'WEATHER_FROM_CITY';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_LOCATION, WEATHER_FROM_COORDS, WEATHER_FROM_CITY, SET_CITY } from './actions/actionTypes';\r\n\r\nconst initialState = {\r\n  data: {}\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_LOCATION:\r\n      return Object.assign({}, state, {\r\n        latitude: action.latitude,\r\n        longitude: action.longitude,\r\n      });\r\n    case WEATHER_FROM_COORDS:\r\n      return Object.assign({}, state, {\r\n        data: action.data,\r\n        status: action.status,\r\n      });\r\n    case SET_CITY:\r\n      return Object.assign({}, state, {\r\n        city: action.city,\r\n      });\r\n    case WEATHER_FROM_CITY:\r\n      return Object.assign({}, state, {\r\n        dataWeather: action.dataWeather,\r\n        statusWeather: action.status,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport WeatherTable from '../components/WeatherTable/WeatherTable';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { weatherFromCity } from '../redux/actions/actions';\r\nimport ErrorMessage from '../components/ErrorMessage/ErrorMessage';\r\n\r\nconst Weather = (props) => {\r\n  const city = props.city || localStorage.getItem('city');\r\n\r\n  if (city && props.data.name !== city) {\r\n    props.onWeatherFromCity(city);\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      {\r\n        (city)\r\n          ? <WeatherTable data={props.data} status={props.status} />\r\n          : <ErrorMessage children='No city selected. Please return to the main page and select a city' />\r\n      }\r\n      <NavLink to=\"/\">\r\n        <Button\r\n          basic\r\n          color='orange'\r\n          style={{ marginTop: 10 }}\r\n        >\r\n          Back to home page\r\n        </Button>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    city: state.city,\r\n    data: state.dataWeather || {},\r\n    status: state.statusWeather,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onWeatherFromCity: (city) => dispatch(weatherFromCity(city)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport rootReducer from './redux/reducer';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Weather from './pages/Weather';\r\n\r\nconst Store = createStore(rootReducer, applyMiddleware(ReduxThunk));\r\n\r\nconst app = (\r\n  <Provider store={Store}>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path='/' component={App} exact />\r\n        <Route path='/weather' component={Weather} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(\r\n  app,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}